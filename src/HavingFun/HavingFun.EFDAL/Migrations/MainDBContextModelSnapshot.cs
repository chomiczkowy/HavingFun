// <auto-generated />
using HavingFun.EFDAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HavingFun.EFDAL.Migrations
{
    [DbContext(typeof(MainDBContext))]
    partial class MainDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HavingFun.EFDAL.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("Claims","schUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "CanSeeUsersList",
                            Value = "Allow"
                        });
                });

            modelBuilder.Entity("HavingFun.EFDAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("Roles","schUsers");
                });

            modelBuilder.Entity("HavingFun.EFDAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActivated");

                    b.Property<string>("LastName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Users","schUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "karolas-borys@wp.pl",
                            FirstName = "Karol",
                            IsActivated = true,
                            LastName = "LatkaAdmin",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            Username = "KarolAdmin"
                        },
                        new
                        {
                            Id = 2,
                            EmailAddress = "karolas-borys2@wp.pl",
                            FirstName = "Karol",
                            IsActivated = true,
                            LastName = "LatkaRegular",
                            PasswordHash = "effcc54ba75fb84cca1aadb6cae302e84c29dcb550e6e19e99c4916b89c69e0b",
                            Username = "Karol"
                        });
                });

            modelBuilder.Entity("HavingFun.EFDAL.Entities.UserClaims", b =>
                {
                    b.Property<int>("ClaimId");

                    b.Property<int>("UserId");

                    b.HasKey("ClaimId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","schUsers");

                    b.HasData(
                        new
                        {
                            ClaimId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HavingFun.EFDAL.Entities.UserRoles", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles","schUsers");
                });

            modelBuilder.Entity("HavingFun.EFDAL.Entities.UserClaims", b =>
                {
                    b.HasOne("HavingFun.EFDAL.Entities.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HavingFun.EFDAL.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HavingFun.EFDAL.Entities.UserRoles", b =>
                {
                    b.HasOne("HavingFun.EFDAL.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HavingFun.EFDAL.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
